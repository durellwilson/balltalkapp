rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isCollaborator(projectData) {
      return isSignedIn() && (
        projectData.ownerId == request.auth.uid || 
        projectData.collaborators.hasAny([request.auth.uid]) ||
        (projectData.collaborators != null && 
         projectData.collaborators.map(function(c) { return c.id; }).hasAny([request.auth.uid]))
      );
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid || 
        resource.data.isPublic == true ||
        isCollaborator(resource.data)
      );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid ||
        isCollaborator(resource.data)
      );
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }
    
    // Audio files collection
    match /audioFiles/{fileId} {
      allow read: if isSignedIn() && (
        resource.data.uploadedBy == request.auth.uid || 
        resource.data.isPublic == true ||
        (resource.data.projectId != null && 
         exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) && 
         get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerId == request.auth.uid) ||
        (resource.data.projectId != null && 
         exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) && 
         isCollaborator(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data))
      );
      allow create: if isSignedIn() && request.resource.data.uploadedBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.uploadedBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.uploadedBy == request.auth.uid;
    }
    
    // Streaming tracks collection
    match /streamingTracks/{trackId} {
      allow read: if resource.data.isPublic == true || 
                   (isSignedIn() && resource.data.artistId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.artistId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.artistId == request.auth.uid;
    }
    
    // Collaboration sessions collection
    match /collaborationSessions/{sessionId} {
      allow read: if isSignedIn() && (
        resource.data.hostId == request.auth.uid ||
        resource.data.activeUsers.map(function(u) { return u.userId; }).hasAny([request.auth.uid])
      );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.hostId == request.auth.uid ||
        resource.data.activeUsers.map(function(u) { return u.userId; }).hasAny([request.auth.uid])
      );
      allow delete: if isSignedIn() && resource.data.hostId == request.auth.uid;
    }
    
    // Collaboration messages collection
    match /collaborationMessages/{messageId} {
      allow read: if isSignedIn() && 
                   exists(/databases/$(database)/documents/collaborationSessions/$(resource.data.sessionId)) &&
                   (
                     get(/databases/$(database)/documents/collaborationSessions/$(resource.data.sessionId)).data.hostId == request.auth.uid ||
                     get(/databases/$(database)/documents/collaborationSessions/$(resource.data.sessionId)).data.activeUsers.map(function(u) { return u.userId; }).hasAny([request.auth.uid])
                   );
      allow create: if isSignedIn() && 
                     exists(/databases/$(database)/documents/collaborationSessions/$(request.resource.data.sessionId)) &&
                     (
                       get(/databases/$(database)/documents/collaborationSessions/$(request.resource.data.sessionId)).data.hostId == request.auth.uid ||
                       get(/databases/$(database)/documents/collaborationSessions/$(request.resource.data.sessionId)).data.activeUsers.map(function(u) { return u.userId; }).hasAny([request.auth.uid])
                     );
      allow update: if false; // Messages cannot be updated
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Collaboration events collection
    match /collaborationEvents/{eventId} {
      allow read: if isSignedIn() && 
                   exists(/databases/$(database)/documents/collaborationSessions/$(resource.data.sessionId)) &&
                   (
                     get(/databases/$(database)/documents/collaborationSessions/$(resource.data.sessionId)).data.hostId == request.auth.uid ||
                     get(/databases/$(database)/documents/collaborationSessions/$(resource.data.sessionId)).data.activeUsers.map(function(u) { return u.userId; }).hasAny([request.auth.uid])
                   );
      allow create: if isSignedIn() && 
                     exists(/databases/$(database)/documents/collaborationSessions/$(request.resource.data.sessionId)) &&
                     (
                       get(/databases/$(database)/documents/collaborationSessions/$(request.resource.data.sessionId)).data.hostId == request.auth.uid ||
                       get(/databases/$(database)/documents/collaborationSessions/$(request.resource.data.sessionId)).data.activeUsers.map(function(u) { return u.userId; }).hasAny([request.auth.uid])
                     );
      allow update: if false; // Events cannot be updated
      allow delete: if false; // Events cannot be deleted
    }

    match /mastering_presets/{presetId} {
      allow read: if true;
      allow write: if request.auth != null && 
                    (resource == null || resource.data.createdBy == request.auth.uid);
    }
    
    // Vocal presets
    match /vocal_presets/{presetId} {
      allow read: if true;
      allow write: if request.auth != null && 
                    (resource == null || resource.data.createdBy == request.auth.uid);
    }
    
    // Processing results
    match /mastering_results/{resultId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /vocal_results/{resultId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Allow authenticated users to read and write their own audio processing settings
    match /audioProcessingSettings/{userId}/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read presets
    match /presets/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Test collections can be read and written by anyone during testing
    match /test/{document=**} {
      allow read, write: if true;
    }
  }
}
